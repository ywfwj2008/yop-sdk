<?php
/**
 * TransferResultDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 企业账户
 *
 * <p>账户组-企业账户</p>
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Cloud-account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * TransferResultDTO Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransferResultDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransferResultDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'debitCustomerLoginName' => 'string',
        'debitCustomerPwd' => 'string',
        'requestNo' => 'string',
        'orderNo' => 'string',
        'createTime' => 'string',
        'trxTime' => 'string',
        'amount' => 'float',
        'status' => 'string',
        'fee' => 'float',
        'basicProductCode' => 'string',
        'salesProductCode' => 'string',
        'usage' => 'string',
        'errorCode' => 'string',
        'errorMsg' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'debitCustomerLoginName' => null,
        'debitCustomerPwd' => null,
        'requestNo' => null,
        'orderNo' => null,
        'createTime' => 'date-time',
        'trxTime' => 'date-time',
        'amount' => null,
        'status' => null,
        'fee' => null,
        'basicProductCode' => null,
        'salesProductCode' => null,
        'usage' => null,
        'errorCode' => null,
        'errorMsg' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debitCustomerLoginName' => 'debitCustomerLoginName',
        'debitCustomerPwd' => 'debitCustomerPwd',
        'requestNo' => 'requestNo',
        'orderNo' => 'orderNo',
        'createTime' => 'createTime',
        'trxTime' => 'trxTime',
        'amount' => 'amount',
        'status' => 'status',
        'fee' => 'fee',
        'basicProductCode' => 'basicProductCode',
        'salesProductCode' => 'salesProductCode',
        'usage' => 'usage',
        'errorCode' => 'errorCode',
        'errorMsg' => 'errorMsg'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debitCustomerLoginName' => 'setDebitCustomerLoginName',
        'debitCustomerPwd' => 'setDebitCustomerPwd',
        'requestNo' => 'setRequestNo',
        'orderNo' => 'setOrderNo',
        'createTime' => 'setCreateTime',
        'trxTime' => 'setTrxTime',
        'amount' => 'setAmount',
        'status' => 'setStatus',
        'fee' => 'setFee',
        'basicProductCode' => 'setBasicProductCode',
        'salesProductCode' => 'setSalesProductCode',
        'usage' => 'setUsage',
        'errorCode' => 'setErrorCode',
        'errorMsg' => 'setErrorMsg'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debitCustomerLoginName' => 'getDebitCustomerLoginName',
        'debitCustomerPwd' => 'getDebitCustomerPwd',
        'requestNo' => 'getRequestNo',
        'orderNo' => 'getOrderNo',
        'createTime' => 'getCreateTime',
        'trxTime' => 'getTrxTime',
        'amount' => 'getAmount',
        'status' => 'getStatus',
        'fee' => 'getFee',
        'basicProductCode' => 'getBasicProductCode',
        'salesProductCode' => 'getSalesProductCode',
        'usage' => 'getUsage',
        'errorCode' => 'getErrorCode',
        'errorMsg' => 'getErrorMsg'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debitCustomerLoginName'] = isset($data['debitCustomerLoginName']) ? $data['debitCustomerLoginName'] : null;
        $this->container['debitCustomerPwd'] = isset($data['debitCustomerPwd']) ? $data['debitCustomerPwd'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['orderNo'] = isset($data['orderNo']) ? $data['orderNo'] : null;
        $this->container['createTime'] = isset($data['createTime']) ? $data['createTime'] : null;
        $this->container['trxTime'] = isset($data['trxTime']) ? $data['trxTime'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['basicProductCode'] = isset($data['basicProductCode']) ? $data['basicProductCode'] : null;
        $this->container['salesProductCode'] = isset($data['salesProductCode']) ? $data['salesProductCode'] : null;
        $this->container['usage'] = isset($data['usage']) ? $data['usage'] : null;
        $this->container['errorCode'] = isset($data['errorCode']) ? $data['errorCode'] : null;
        $this->container['errorMsg'] = isset($data['errorMsg']) ? $data['errorMsg'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debitCustomerLoginName
     *
     * @return string
     */
    public function getDebitCustomerLoginName()
    {
        return $this->container['debitCustomerLoginName'];
    }

    /**
     * Sets debitCustomerLoginName
     *
     * @param string $debitCustomerLoginName debitCustomerLoginName
     *
     * @return $this
     */
    public function setDebitCustomerLoginName($debitCustomerLoginName)
    {
        $this->container['debitCustomerLoginName'] = $debitCustomerLoginName;

        return $this;
    }

    /**
     * Gets debitCustomerPwd
     *
     * @return string
     */
    public function getDebitCustomerPwd()
    {
        return $this->container['debitCustomerPwd'];
    }

    /**
     * Sets debitCustomerPwd
     *
     * @param string $debitCustomerPwd debitCustomerPwd
     *
     * @return $this
     */
    public function setDebitCustomerPwd($debitCustomerPwd)
    {
        $this->container['debitCustomerPwd'] = $debitCustomerPwd;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo requestNo
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets orderNo
     *
     * @return string
     */
    public function getOrderNo()
    {
        return $this->container['orderNo'];
    }

    /**
     * Sets orderNo
     *
     * @param string $orderNo orderNo
     *
     * @return $this
     */
    public function setOrderNo($orderNo)
    {
        $this->container['orderNo'] = $orderNo;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param string $createTime createTime
     *
     * @return $this
     */
    public function setCreateTime($createTime)
    {
        $this->container['createTime'] = $createTime;

        return $this;
    }

    /**
     * Gets trxTime
     *
     * @return string
     */
    public function getTrxTime()
    {
        return $this->container['trxTime'];
    }

    /**
     * Sets trxTime
     *
     * @param string $trxTime trxTime
     *
     * @return $this
     */
    public function setTrxTime($trxTime)
    {
        $this->container['trxTime'] = $trxTime;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float $fee fee
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets basicProductCode
     *
     * @return string
     */
    public function getBasicProductCode()
    {
        return $this->container['basicProductCode'];
    }

    /**
     * Sets basicProductCode
     *
     * @param string $basicProductCode basicProductCode
     *
     * @return $this
     */
    public function setBasicProductCode($basicProductCode)
    {
        $this->container['basicProductCode'] = $basicProductCode;

        return $this;
    }

    /**
     * Gets salesProductCode
     *
     * @return string
     */
    public function getSalesProductCode()
    {
        return $this->container['salesProductCode'];
    }

    /**
     * Sets salesProductCode
     *
     * @param string $salesProductCode salesProductCode
     *
     * @return $this
     */
    public function setSalesProductCode($salesProductCode)
    {
        $this->container['salesProductCode'] = $salesProductCode;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return string
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param string $usage usage
     *
     * @return $this
     */
    public function setUsage($usage)
    {
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets errorCode
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode
     *
     * @param string $errorCode errorCode
     *
     * @return $this
     */
    public function setErrorCode($errorCode)
    {
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets errorMsg
     *
     * @return string
     */
    public function getErrorMsg()
    {
        return $this->container['errorMsg'];
    }

    /**
     * Sets errorMsg
     *
     * @param string $errorMsg errorMsg
     *
     * @return $this
     */
    public function setErrorMsg($errorMsg)
    {
        $this->container['errorMsg'] = $errorMsg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


