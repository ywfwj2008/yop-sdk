<?php
/**
 * QueryCertificateResultRespDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 子商户管理
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Mer\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * QueryCertificateResultRespDto Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueryCertificateResultRespDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryCertificateResultRespDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'returnCode' => 'string',
        'returnMsg' => 'string',
        'requestNo' => 'string',
        'applymentId' => 'string',
        'applymentState' => 'string',
        'qrcodeUrl' => 'string',
        'rejectParam' => 'string',
        'rejectReason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'returnCode' => null,
        'returnMsg' => null,
        'requestNo' => null,
        'applymentId' => null,
        'applymentState' => null,
        'qrcodeUrl' => null,
        'rejectParam' => null,
        'rejectReason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'returnCode' => 'returnCode',
        'returnMsg' => 'returnMsg',
        'requestNo' => 'requestNo',
        'applymentId' => 'applymentId',
        'applymentState' => 'applymentState',
        'qrcodeUrl' => 'qrcodeUrl',
        'rejectParam' => 'rejectParam',
        'rejectReason' => 'rejectReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'returnCode' => 'setReturnCode',
        'returnMsg' => 'setReturnMsg',
        'requestNo' => 'setRequestNo',
        'applymentId' => 'setApplymentId',
        'applymentState' => 'setApplymentState',
        'qrcodeUrl' => 'setQrcodeUrl',
        'rejectParam' => 'setRejectParam',
        'rejectReason' => 'setRejectReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'returnCode' => 'getReturnCode',
        'returnMsg' => 'getReturnMsg',
        'requestNo' => 'getRequestNo',
        'applymentId' => 'getApplymentId',
        'applymentState' => 'getApplymentState',
        'qrcodeUrl' => 'getQrcodeUrl',
        'rejectParam' => 'getRejectParam',
        'rejectReason' => 'getRejectReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['returnCode'] = isset($data['returnCode']) ? $data['returnCode'] : null;
        $this->container['returnMsg'] = isset($data['returnMsg']) ? $data['returnMsg'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['applymentId'] = isset($data['applymentId']) ? $data['applymentId'] : null;
        $this->container['applymentState'] = isset($data['applymentState']) ? $data['applymentState'] : null;
        $this->container['qrcodeUrl'] = isset($data['qrcodeUrl']) ? $data['qrcodeUrl'] : null;
        $this->container['rejectParam'] = isset($data['rejectParam']) ? $data['rejectParam'] : null;
        $this->container['rejectReason'] = isset($data['rejectReason']) ? $data['rejectReason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets returnCode
     *
     * @return string
     */
    public function getReturnCode()
    {
        return $this->container['returnCode'];
    }

    /**
     * Sets returnCode
     *
     * @param string $returnCode returnCode
     *
     * @return $this
     */
    public function setReturnCode($returnCode)
    {
        $this->container['returnCode'] = $returnCode;

        return $this;
    }

    /**
     * Gets returnMsg
     *
     * @return string
     */
    public function getReturnMsg()
    {
        return $this->container['returnMsg'];
    }

    /**
     * Sets returnMsg
     *
     * @param string $returnMsg returnMsg
     *
     * @return $this
     */
    public function setReturnMsg($returnMsg)
    {
        $this->container['returnMsg'] = $returnMsg;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo requestNo
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets applymentId
     *
     * @return string
     */
    public function getApplymentId()
    {
        return $this->container['applymentId'];
    }

    /**
     * Sets applymentId
     *
     * @param string $applymentId applymentId
     *
     * @return $this
     */
    public function setApplymentId($applymentId)
    {
        $this->container['applymentId'] = $applymentId;

        return $this;
    }

    /**
     * Gets applymentState
     *
     * @return string
     */
    public function getApplymentState()
    {
        return $this->container['applymentState'];
    }

    /**
     * Sets applymentState
     *
     * @param string $applymentState applymentState
     *
     * @return $this
     */
    public function setApplymentState($applymentState)
    {
        $this->container['applymentState'] = $applymentState;

        return $this;
    }

    /**
     * Gets qrcodeUrl
     *
     * @return string
     */
    public function getQrcodeUrl()
    {
        return $this->container['qrcodeUrl'];
    }

    /**
     * Sets qrcodeUrl
     *
     * @param string $qrcodeUrl qrcodeUrl
     *
     * @return $this
     */
    public function setQrcodeUrl($qrcodeUrl)
    {
        $this->container['qrcodeUrl'] = $qrcodeUrl;

        return $this;
    }

    /**
     * Gets rejectParam
     *
     * @return string
     */
    public function getRejectParam()
    {
        return $this->container['rejectParam'];
    }

    /**
     * Sets rejectParam
     *
     * @param string $rejectParam rejectParam
     *
     * @return $this
     */
    public function setRejectParam($rejectParam)
    {
        $this->container['rejectParam'] = $rejectParam;

        return $this;
    }

    /**
     * Gets rejectReason
     *
     * @return string
     */
    public function getRejectReason()
    {
        return $this->container['rejectReason'];
    }

    /**
     * Sets rejectReason
     *
     * @param string $rejectReason rejectReason
     *
     * @return $this
     */
    public function setRejectReason($rejectReason)
    {
        $this->container['rejectReason'] = $rejectReason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


