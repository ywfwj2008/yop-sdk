<?php
/**
 * MerchantBasicInfoRespDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 子商户管理
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Mer\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * MerchantBasicInfoRespDTO Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MerchantBasicInfoRespDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MerchantBasicInfoRespDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'returnMsg' => 'string',
        'returnCode' => 'string',
        'merNo' => 'string',
        'agentNo' => 'string',
        'signName' => 'string',
        'merchantName' => 'string',
        'shortName' => 'string',
        'bizcatCode' => 'string',
        'bizcatName' => 'string',
        'subBizcatCode' => 'string',
        'subBizcatName' => 'string',
        'province' => 'string',
        'city' => 'string',
        'address' => 'string',
        'postCode' => 'string',
        'status' => 'string',
        'signType' => 'string',
        'createTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'returnMsg' => null,
        'returnCode' => null,
        'merNo' => null,
        'agentNo' => null,
        'signName' => null,
        'merchantName' => null,
        'shortName' => null,
        'bizcatCode' => null,
        'bizcatName' => null,
        'subBizcatCode' => null,
        'subBizcatName' => null,
        'province' => null,
        'city' => null,
        'address' => null,
        'postCode' => null,
        'status' => null,
        'signType' => null,
        'createTime' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'returnMsg' => 'returnMsg',
        'returnCode' => 'returnCode',
        'merNo' => 'merNo',
        'agentNo' => 'agentNo',
        'signName' => 'signName',
        'merchantName' => 'merchantName',
        'shortName' => 'shortName',
        'bizcatCode' => 'bizcatCode',
        'bizcatName' => 'bizcatName',
        'subBizcatCode' => 'subBizcatCode',
        'subBizcatName' => 'subBizcatName',
        'province' => 'province',
        'city' => 'city',
        'address' => 'address',
        'postCode' => 'postCode',
        'status' => 'status',
        'signType' => 'signType',
        'createTime' => 'createTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'returnMsg' => 'setReturnMsg',
        'returnCode' => 'setReturnCode',
        'merNo' => 'setMerNo',
        'agentNo' => 'setAgentNo',
        'signName' => 'setSignName',
        'merchantName' => 'setMerchantName',
        'shortName' => 'setShortName',
        'bizcatCode' => 'setBizcatCode',
        'bizcatName' => 'setBizcatName',
        'subBizcatCode' => 'setSubBizcatCode',
        'subBizcatName' => 'setSubBizcatName',
        'province' => 'setProvince',
        'city' => 'setCity',
        'address' => 'setAddress',
        'postCode' => 'setPostCode',
        'status' => 'setStatus',
        'signType' => 'setSignType',
        'createTime' => 'setCreateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'returnMsg' => 'getReturnMsg',
        'returnCode' => 'getReturnCode',
        'merNo' => 'getMerNo',
        'agentNo' => 'getAgentNo',
        'signName' => 'getSignName',
        'merchantName' => 'getMerchantName',
        'shortName' => 'getShortName',
        'bizcatCode' => 'getBizcatCode',
        'bizcatName' => 'getBizcatName',
        'subBizcatCode' => 'getSubBizcatCode',
        'subBizcatName' => 'getSubBizcatName',
        'province' => 'getProvince',
        'city' => 'getCity',
        'address' => 'getAddress',
        'postCode' => 'getPostCode',
        'status' => 'getStatus',
        'signType' => 'getSignType',
        'createTime' => 'getCreateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['returnMsg'] = isset($data['returnMsg']) ? $data['returnMsg'] : null;
        $this->container['returnCode'] = isset($data['returnCode']) ? $data['returnCode'] : null;
        $this->container['merNo'] = isset($data['merNo']) ? $data['merNo'] : null;
        $this->container['agentNo'] = isset($data['agentNo']) ? $data['agentNo'] : null;
        $this->container['signName'] = isset($data['signName']) ? $data['signName'] : null;
        $this->container['merchantName'] = isset($data['merchantName']) ? $data['merchantName'] : null;
        $this->container['shortName'] = isset($data['shortName']) ? $data['shortName'] : null;
        $this->container['bizcatCode'] = isset($data['bizcatCode']) ? $data['bizcatCode'] : null;
        $this->container['bizcatName'] = isset($data['bizcatName']) ? $data['bizcatName'] : null;
        $this->container['subBizcatCode'] = isset($data['subBizcatCode']) ? $data['subBizcatCode'] : null;
        $this->container['subBizcatName'] = isset($data['subBizcatName']) ? $data['subBizcatName'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['postCode'] = isset($data['postCode']) ? $data['postCode'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['signType'] = isset($data['signType']) ? $data['signType'] : null;
        $this->container['createTime'] = isset($data['createTime']) ? $data['createTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets returnMsg
     *
     * @return string
     */
    public function getReturnMsg()
    {
        return $this->container['returnMsg'];
    }

    /**
     * Sets returnMsg
     *
     * @param string $returnMsg returnMsg
     *
     * @return $this
     */
    public function setReturnMsg($returnMsg)
    {
        $this->container['returnMsg'] = $returnMsg;

        return $this;
    }

    /**
     * Gets returnCode
     *
     * @return string
     */
    public function getReturnCode()
    {
        return $this->container['returnCode'];
    }

    /**
     * Sets returnCode
     *
     * @param string $returnCode returnCode
     *
     * @return $this
     */
    public function setReturnCode($returnCode)
    {
        $this->container['returnCode'] = $returnCode;

        return $this;
    }

    /**
     * Gets merNo
     *
     * @return string
     */
    public function getMerNo()
    {
        return $this->container['merNo'];
    }

    /**
     * Sets merNo
     *
     * @param string $merNo merNo
     *
     * @return $this
     */
    public function setMerNo($merNo)
    {
        $this->container['merNo'] = $merNo;

        return $this;
    }

    /**
     * Gets agentNo
     *
     * @return string
     */
    public function getAgentNo()
    {
        return $this->container['agentNo'];
    }

    /**
     * Sets agentNo
     *
     * @param string $agentNo agentNo
     *
     * @return $this
     */
    public function setAgentNo($agentNo)
    {
        $this->container['agentNo'] = $agentNo;

        return $this;
    }

    /**
     * Gets signName
     *
     * @return string
     */
    public function getSignName()
    {
        return $this->container['signName'];
    }

    /**
     * Sets signName
     *
     * @param string $signName signName
     *
     * @return $this
     */
    public function setSignName($signName)
    {
        $this->container['signName'] = $signName;

        return $this;
    }

    /**
     * Gets merchantName
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchantName'];
    }

    /**
     * Sets merchantName
     *
     * @param string $merchantName merchantName
     *
     * @return $this
     */
    public function setMerchantName($merchantName)
    {
        $this->container['merchantName'] = $merchantName;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string $shortName shortName
     *
     * @return $this
     */
    public function setShortName($shortName)
    {
        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets bizcatCode
     *
     * @return string
     */
    public function getBizcatCode()
    {
        return $this->container['bizcatCode'];
    }

    /**
     * Sets bizcatCode
     *
     * @param string $bizcatCode bizcatCode
     *
     * @return $this
     */
    public function setBizcatCode($bizcatCode)
    {
        $this->container['bizcatCode'] = $bizcatCode;

        return $this;
    }

    /**
     * Gets bizcatName
     *
     * @return string
     */
    public function getBizcatName()
    {
        return $this->container['bizcatName'];
    }

    /**
     * Sets bizcatName
     *
     * @param string $bizcatName bizcatName
     *
     * @return $this
     */
    public function setBizcatName($bizcatName)
    {
        $this->container['bizcatName'] = $bizcatName;

        return $this;
    }

    /**
     * Gets subBizcatCode
     *
     * @return string
     */
    public function getSubBizcatCode()
    {
        return $this->container['subBizcatCode'];
    }

    /**
     * Sets subBizcatCode
     *
     * @param string $subBizcatCode subBizcatCode
     *
     * @return $this
     */
    public function setSubBizcatCode($subBizcatCode)
    {
        $this->container['subBizcatCode'] = $subBizcatCode;

        return $this;
    }

    /**
     * Gets subBizcatName
     *
     * @return string
     */
    public function getSubBizcatName()
    {
        return $this->container['subBizcatName'];
    }

    /**
     * Sets subBizcatName
     *
     * @param string $subBizcatName subBizcatName
     *
     * @return $this
     */
    public function setSubBizcatName($subBizcatName)
    {
        $this->container['subBizcatName'] = $subBizcatName;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string $province province
     *
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets postCode
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['postCode'];
    }

    /**
     * Sets postCode
     *
     * @param string $postCode postCode
     *
     * @return $this
     */
    public function setPostCode($postCode)
    {
        $this->container['postCode'] = $postCode;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets signType
     *
     * @return string
     */
    public function getSignType()
    {
        return $this->container['signType'];
    }

    /**
     * Sets signType
     *
     * @param string $signType signType
     *
     * @return $this
     */
    public function setSignType($signType)
    {
        $this->container['signType'] = $signType;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param string $createTime createTime
     *
     * @return $this
     */
    public function setCreateTime($createTime)
    {
        $this->container['createTime'] = $createTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


