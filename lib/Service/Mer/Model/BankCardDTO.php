<?php
/**
 * BankCardDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 子商户管理
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Mer\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * BankCardDTO Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankCardDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankCardDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bankCardId' => 'int',
        'bankCardType' => 'string',
        'bankId' => 'string',
        'bankName' => 'string',
        'province' => 'string',
        'city' => 'string',
        'branchCode' => 'string',
        'branchName' => 'string',
        'accountName' => 'string',
        'bankActId' => 'string',
        'bankCardTags' => 'string[]',
        'status' => 'string',
        'provinceName' => 'string',
        'cityName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bankCardId' => 'int32',
        'bankCardType' => null,
        'bankId' => null,
        'bankName' => null,
        'province' => null,
        'city' => null,
        'branchCode' => null,
        'branchName' => null,
        'accountName' => null,
        'bankActId' => null,
        'bankCardTags' => null,
        'status' => null,
        'provinceName' => null,
        'cityName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankCardId' => 'bankCardId',
        'bankCardType' => 'bankCardType',
        'bankId' => 'bankId',
        'bankName' => 'bankName',
        'province' => 'province',
        'city' => 'city',
        'branchCode' => 'branchCode',
        'branchName' => 'branchName',
        'accountName' => 'accountName',
        'bankActId' => 'bankActId',
        'bankCardTags' => 'bankCardTags',
        'status' => 'status',
        'provinceName' => 'provinceName',
        'cityName' => 'cityName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankCardId' => 'setBankCardId',
        'bankCardType' => 'setBankCardType',
        'bankId' => 'setBankId',
        'bankName' => 'setBankName',
        'province' => 'setProvince',
        'city' => 'setCity',
        'branchCode' => 'setBranchCode',
        'branchName' => 'setBranchName',
        'accountName' => 'setAccountName',
        'bankActId' => 'setBankActId',
        'bankCardTags' => 'setBankCardTags',
        'status' => 'setStatus',
        'provinceName' => 'setProvinceName',
        'cityName' => 'setCityName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankCardId' => 'getBankCardId',
        'bankCardType' => 'getBankCardType',
        'bankId' => 'getBankId',
        'bankName' => 'getBankName',
        'province' => 'getProvince',
        'city' => 'getCity',
        'branchCode' => 'getBranchCode',
        'branchName' => 'getBranchName',
        'accountName' => 'getAccountName',
        'bankActId' => 'getBankActId',
        'bankCardTags' => 'getBankCardTags',
        'status' => 'getStatus',
        'provinceName' => 'getProvinceName',
        'cityName' => 'getCityName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bankCardId'] = isset($data['bankCardId']) ? $data['bankCardId'] : null;
        $this->container['bankCardType'] = isset($data['bankCardType']) ? $data['bankCardType'] : null;
        $this->container['bankId'] = isset($data['bankId']) ? $data['bankId'] : null;
        $this->container['bankName'] = isset($data['bankName']) ? $data['bankName'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['branchCode'] = isset($data['branchCode']) ? $data['branchCode'] : null;
        $this->container['branchName'] = isset($data['branchName']) ? $data['branchName'] : null;
        $this->container['accountName'] = isset($data['accountName']) ? $data['accountName'] : null;
        $this->container['bankActId'] = isset($data['bankActId']) ? $data['bankActId'] : null;
        $this->container['bankCardTags'] = isset($data['bankCardTags']) ? $data['bankCardTags'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['provinceName'] = isset($data['provinceName']) ? $data['provinceName'] : null;
        $this->container['cityName'] = isset($data['cityName']) ? $data['cityName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankCardId
     *
     * @return int
     */
    public function getBankCardId()
    {
        return $this->container['bankCardId'];
    }

    /**
     * Sets bankCardId
     *
     * @param int $bankCardId bankCardId
     *
     * @return $this
     */
    public function setBankCardId($bankCardId)
    {
        $this->container['bankCardId'] = $bankCardId;

        return $this;
    }

    /**
     * Gets bankCardType
     *
     * @return string
     */
    public function getBankCardType()
    {
        return $this->container['bankCardType'];
    }

    /**
     * Sets bankCardType
     *
     * @param string $bankCardType bankCardType
     *
     * @return $this
     */
    public function setBankCardType($bankCardType)
    {
        $this->container['bankCardType'] = $bankCardType;

        return $this;
    }

    /**
     * Gets bankId
     *
     * @return string
     */
    public function getBankId()
    {
        return $this->container['bankId'];
    }

    /**
     * Sets bankId
     *
     * @param string $bankId bankId
     *
     * @return $this
     */
    public function setBankId($bankId)
    {
        $this->container['bankId'] = $bankId;

        return $this;
    }

    /**
     * Gets bankName
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bankName'];
    }

    /**
     * Sets bankName
     *
     * @param string $bankName bankName
     *
     * @return $this
     */
    public function setBankName($bankName)
    {
        $this->container['bankName'] = $bankName;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string $province province
     *
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets branchCode
     *
     * @return string
     */
    public function getBranchCode()
    {
        return $this->container['branchCode'];
    }

    /**
     * Sets branchCode
     *
     * @param string $branchCode branchCode
     *
     * @return $this
     */
    public function setBranchCode($branchCode)
    {
        $this->container['branchCode'] = $branchCode;

        return $this;
    }

    /**
     * Gets branchName
     *
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName
     *
     * @param string $branchName branchName
     *
     * @return $this
     */
    public function setBranchName($branchName)
    {
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets accountName
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName
     *
     * @param string $accountName accountName
     *
     * @return $this
     */
    public function setAccountName($accountName)
    {
        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets bankActId
     *
     * @return string
     */
    public function getBankActId()
    {
        return $this->container['bankActId'];
    }

    /**
     * Sets bankActId
     *
     * @param string $bankActId bankActId
     *
     * @return $this
     */
    public function setBankActId($bankActId)
    {
        $this->container['bankActId'] = $bankActId;

        return $this;
    }

    /**
     * Gets bankCardTags
     *
     * @return string[]
     */
    public function getBankCardTags()
    {
        return $this->container['bankCardTags'];
    }

    /**
     * Sets bankCardTags
     *
     * @param string[] $bankCardTags bankCardTags
     *
     * @return $this
     */
    public function setBankCardTags($bankCardTags)
    {
        $this->container['bankCardTags'] = $bankCardTags;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets provinceName
     *
     * @return string
     */
    public function getProvinceName()
    {
        return $this->container['provinceName'];
    }

    /**
     * Sets provinceName
     *
     * @param string $provinceName provinceName
     *
     * @return $this
     */
    public function setProvinceName($provinceName)
    {
        $this->container['provinceName'] = $provinceName;

        return $this;
    }

    /**
     * Gets cityName
     *
     * @return string
     */
    public function getCityName()
    {
        return $this->container['cityName'];
    }

    /**
     * Sets cityName
     *
     * @param string $cityName cityName
     *
     * @return $this
     */
    public function setCityName($cityName)
    {
        $this->container['cityName'] = $cityName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


