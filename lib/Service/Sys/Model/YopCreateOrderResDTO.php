<?php
/**
 * YopCreateOrderResDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 子商户入网大算航旅
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Sys\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * YopCreateOrderResDTO Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class YopCreateOrderResDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'YopCreateOrderResDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'bizSystemNo' => 'string',
        'parentMerchantNo' => 'string',
        'merchantNo' => 'string',
        'orderId' => 'string',
        'uniqueOrderNo' => 'string',
        'goodsParamExt' => 'string',
        'memo' => 'string',
        'token' => 'string',
        'payURL' => 'string',
        'fundProcessType' => 'string',
        'divideRequestId' => 'string',
        'parentMerchantName' => 'string',
        'merchantName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'bizSystemNo' => null,
        'parentMerchantNo' => null,
        'merchantNo' => null,
        'orderId' => null,
        'uniqueOrderNo' => null,
        'goodsParamExt' => null,
        'memo' => null,
        'token' => null,
        'payURL' => null,
        'fundProcessType' => null,
        'divideRequestId' => null,
        'parentMerchantName' => null,
        'merchantName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'bizSystemNo' => 'bizSystemNo',
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantNo' => 'merchantNo',
        'orderId' => 'orderId',
        'uniqueOrderNo' => 'uniqueOrderNo',
        'goodsParamExt' => 'goodsParamExt',
        'memo' => 'memo',
        'token' => 'token',
        'payURL' => 'payURL',
        'fundProcessType' => 'fundProcessType',
        'divideRequestId' => 'divideRequestId',
        'parentMerchantName' => 'parentMerchantName',
        'merchantName' => 'merchantName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'bizSystemNo' => 'setBizSystemNo',
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'orderId' => 'setOrderId',
        'uniqueOrderNo' => 'setUniqueOrderNo',
        'goodsParamExt' => 'setGoodsParamExt',
        'memo' => 'setMemo',
        'token' => 'setToken',
        'payURL' => 'setPayURL',
        'fundProcessType' => 'setFundProcessType',
        'divideRequestId' => 'setDivideRequestId',
        'parentMerchantName' => 'setParentMerchantName',
        'merchantName' => 'setMerchantName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'bizSystemNo' => 'getBizSystemNo',
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'orderId' => 'getOrderId',
        'uniqueOrderNo' => 'getUniqueOrderNo',
        'goodsParamExt' => 'getGoodsParamExt',
        'memo' => 'getMemo',
        'token' => 'getToken',
        'payURL' => 'getPayURL',
        'fundProcessType' => 'getFundProcessType',
        'divideRequestId' => 'getDivideRequestId',
        'parentMerchantName' => 'getParentMerchantName',
        'merchantName' => 'getMerchantName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['bizSystemNo'] = isset($data['bizSystemNo']) ? $data['bizSystemNo'] : null;
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['uniqueOrderNo'] = isset($data['uniqueOrderNo']) ? $data['uniqueOrderNo'] : null;
        $this->container['goodsParamExt'] = isset($data['goodsParamExt']) ? $data['goodsParamExt'] : null;
        $this->container['memo'] = isset($data['memo']) ? $data['memo'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['payURL'] = isset($data['payURL']) ? $data['payURL'] : null;
        $this->container['fundProcessType'] = isset($data['fundProcessType']) ? $data['fundProcessType'] : null;
        $this->container['divideRequestId'] = isset($data['divideRequestId']) ? $data['divideRequestId'] : null;
        $this->container['parentMerchantName'] = isset($data['parentMerchantName']) ? $data['parentMerchantName'] : null;
        $this->container['merchantName'] = isset($data['merchantName']) ? $data['merchantName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets bizSystemNo
     *
     * @return string
     */
    public function getBizSystemNo()
    {
        return $this->container['bizSystemNo'];
    }

    /**
     * Sets bizSystemNo
     *
     * @param string $bizSystemNo bizSystemNo
     *
     * @return $this
     */
    public function setBizSystemNo($bizSystemNo)
    {
        $this->container['bizSystemNo'] = $bizSystemNo;

        return $this;
    }

    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo parentMerchantNo
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo merchantNo
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId orderId
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets uniqueOrderNo
     *
     * @return string
     */
    public function getUniqueOrderNo()
    {
        return $this->container['uniqueOrderNo'];
    }

    /**
     * Sets uniqueOrderNo
     *
     * @param string $uniqueOrderNo uniqueOrderNo
     *
     * @return $this
     */
    public function setUniqueOrderNo($uniqueOrderNo)
    {
        $this->container['uniqueOrderNo'] = $uniqueOrderNo;

        return $this;
    }

    /**
     * Gets goodsParamExt
     *
     * @return string
     */
    public function getGoodsParamExt()
    {
        return $this->container['goodsParamExt'];
    }

    /**
     * Sets goodsParamExt
     *
     * @param string $goodsParamExt goodsParamExt
     *
     * @return $this
     */
    public function setGoodsParamExt($goodsParamExt)
    {
        $this->container['goodsParamExt'] = $goodsParamExt;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string $memo memo
     *
     * @return $this
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets payURL
     *
     * @return string
     */
    public function getPayURL()
    {
        return $this->container['payURL'];
    }

    /**
     * Sets payURL
     *
     * @param string $payURL payURL
     *
     * @return $this
     */
    public function setPayURL($payURL)
    {
        $this->container['payURL'] = $payURL;

        return $this;
    }

    /**
     * Gets fundProcessType
     *
     * @return string
     */
    public function getFundProcessType()
    {
        return $this->container['fundProcessType'];
    }

    /**
     * Sets fundProcessType
     *
     * @param string $fundProcessType fundProcessType
     *
     * @return $this
     */
    public function setFundProcessType($fundProcessType)
    {
        $this->container['fundProcessType'] = $fundProcessType;

        return $this;
    }

    /**
     * Gets divideRequestId
     *
     * @return string
     */
    public function getDivideRequestId()
    {
        return $this->container['divideRequestId'];
    }

    /**
     * Sets divideRequestId
     *
     * @param string $divideRequestId divideRequestId
     *
     * @return $this
     */
    public function setDivideRequestId($divideRequestId)
    {
        $this->container['divideRequestId'] = $divideRequestId;

        return $this;
    }

    /**
     * Gets parentMerchantName
     *
     * @return string
     */
    public function getParentMerchantName()
    {
        return $this->container['parentMerchantName'];
    }

    /**
     * Sets parentMerchantName
     *
     * @param string $parentMerchantName parentMerchantName
     *
     * @return $this
     */
    public function setParentMerchantName($parentMerchantName)
    {
        $this->container['parentMerchantName'] = $parentMerchantName;

        return $this;
    }

    /**
     * Gets merchantName
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchantName'];
    }

    /**
     * Sets merchantName
     *
     * @param string $merchantName merchantName
     *
     * @return $this
     */
    public function setMerchantName($merchantName)
    {
        $this->container['merchantName'] = $merchantName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


