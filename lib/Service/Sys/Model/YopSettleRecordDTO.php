<?php
/**
 * YopSettleRecordDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 子商户入网大算航旅
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Sys\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * YopSettleRecordDTO Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class YopSettleRecordDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'YopSettleRecordDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'settlementDate' => 'string',
        'beginSettlementDate' => 'string',
        'endSettlementDate' => 'string',
        'sumRealSettlementAmount' => 'float',
        'remitFee' => 'float',
        'sumNetAmount' => 'float',
        'settlementType' => 'string',
        'remitStatus' => 'string',
        'failMsg' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'settlementDate' => null,
        'beginSettlementDate' => null,
        'endSettlementDate' => null,
        'sumRealSettlementAmount' => null,
        'remitFee' => null,
        'sumNetAmount' => null,
        'settlementType' => null,
        'remitStatus' => null,
        'failMsg' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'settlementDate' => 'settlementDate',
        'beginSettlementDate' => 'beginSettlementDate',
        'endSettlementDate' => 'endSettlementDate',
        'sumRealSettlementAmount' => 'sumRealSettlementAmount',
        'remitFee' => 'remitFee',
        'sumNetAmount' => 'sumNetAmount',
        'settlementType' => 'settlementType',
        'remitStatus' => 'remitStatus',
        'failMsg' => 'failMsg'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'settlementDate' => 'setSettlementDate',
        'beginSettlementDate' => 'setBeginSettlementDate',
        'endSettlementDate' => 'setEndSettlementDate',
        'sumRealSettlementAmount' => 'setSumRealSettlementAmount',
        'remitFee' => 'setRemitFee',
        'sumNetAmount' => 'setSumNetAmount',
        'settlementType' => 'setSettlementType',
        'remitStatus' => 'setRemitStatus',
        'failMsg' => 'setFailMsg'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'settlementDate' => 'getSettlementDate',
        'beginSettlementDate' => 'getBeginSettlementDate',
        'endSettlementDate' => 'getEndSettlementDate',
        'sumRealSettlementAmount' => 'getSumRealSettlementAmount',
        'remitFee' => 'getRemitFee',
        'sumNetAmount' => 'getSumNetAmount',
        'settlementType' => 'getSettlementType',
        'remitStatus' => 'getRemitStatus',
        'failMsg' => 'getFailMsg'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['settlementDate'] = isset($data['settlementDate']) ? $data['settlementDate'] : null;
        $this->container['beginSettlementDate'] = isset($data['beginSettlementDate']) ? $data['beginSettlementDate'] : null;
        $this->container['endSettlementDate'] = isset($data['endSettlementDate']) ? $data['endSettlementDate'] : null;
        $this->container['sumRealSettlementAmount'] = isset($data['sumRealSettlementAmount']) ? $data['sumRealSettlementAmount'] : null;
        $this->container['remitFee'] = isset($data['remitFee']) ? $data['remitFee'] : null;
        $this->container['sumNetAmount'] = isset($data['sumNetAmount']) ? $data['sumNetAmount'] : null;
        $this->container['settlementType'] = isset($data['settlementType']) ? $data['settlementType'] : null;
        $this->container['remitStatus'] = isset($data['remitStatus']) ? $data['remitStatus'] : null;
        $this->container['failMsg'] = isset($data['failMsg']) ? $data['failMsg'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets settlementDate
     *
     * @return string
     */
    public function getSettlementDate()
    {
        return $this->container['settlementDate'];
    }

    /**
     * Sets settlementDate
     *
     * @param string $settlementDate settlementDate
     *
     * @return $this
     */
    public function setSettlementDate($settlementDate)
    {
        $this->container['settlementDate'] = $settlementDate;

        return $this;
    }

    /**
     * Gets beginSettlementDate
     *
     * @return string
     */
    public function getBeginSettlementDate()
    {
        return $this->container['beginSettlementDate'];
    }

    /**
     * Sets beginSettlementDate
     *
     * @param string $beginSettlementDate beginSettlementDate
     *
     * @return $this
     */
    public function setBeginSettlementDate($beginSettlementDate)
    {
        $this->container['beginSettlementDate'] = $beginSettlementDate;

        return $this;
    }

    /**
     * Gets endSettlementDate
     *
     * @return string
     */
    public function getEndSettlementDate()
    {
        return $this->container['endSettlementDate'];
    }

    /**
     * Sets endSettlementDate
     *
     * @param string $endSettlementDate endSettlementDate
     *
     * @return $this
     */
    public function setEndSettlementDate($endSettlementDate)
    {
        $this->container['endSettlementDate'] = $endSettlementDate;

        return $this;
    }

    /**
     * Gets sumRealSettlementAmount
     *
     * @return float
     */
    public function getSumRealSettlementAmount()
    {
        return $this->container['sumRealSettlementAmount'];
    }

    /**
     * Sets sumRealSettlementAmount
     *
     * @param float $sumRealSettlementAmount sumRealSettlementAmount
     *
     * @return $this
     */
    public function setSumRealSettlementAmount($sumRealSettlementAmount)
    {
        $this->container['sumRealSettlementAmount'] = $sumRealSettlementAmount;

        return $this;
    }

    /**
     * Gets remitFee
     *
     * @return float
     */
    public function getRemitFee()
    {
        return $this->container['remitFee'];
    }

    /**
     * Sets remitFee
     *
     * @param float $remitFee remitFee
     *
     * @return $this
     */
    public function setRemitFee($remitFee)
    {
        $this->container['remitFee'] = $remitFee;

        return $this;
    }

    /**
     * Gets sumNetAmount
     *
     * @return float
     */
    public function getSumNetAmount()
    {
        return $this->container['sumNetAmount'];
    }

    /**
     * Sets sumNetAmount
     *
     * @param float $sumNetAmount sumNetAmount
     *
     * @return $this
     */
    public function setSumNetAmount($sumNetAmount)
    {
        $this->container['sumNetAmount'] = $sumNetAmount;

        return $this;
    }

    /**
     * Gets settlementType
     *
     * @return string
     */
    public function getSettlementType()
    {
        return $this->container['settlementType'];
    }

    /**
     * Sets settlementType
     *
     * @param string $settlementType settlementType
     *
     * @return $this
     */
    public function setSettlementType($settlementType)
    {
        $this->container['settlementType'] = $settlementType;

        return $this;
    }

    /**
     * Gets remitStatus
     *
     * @return string
     */
    public function getRemitStatus()
    {
        return $this->container['remitStatus'];
    }

    /**
     * Sets remitStatus
     *
     * @param string $remitStatus remitStatus
     *
     * @return $this
     */
    public function setRemitStatus($remitStatus)
    {
        $this->container['remitStatus'] = $remitStatus;

        return $this;
    }

    /**
     * Gets failMsg
     *
     * @return string
     */
    public function getFailMsg()
    {
        return $this->container['failMsg'];
    }

    /**
     * Sets failMsg
     *
     * @param string $failMsg failMsg
     *
     * @return $this
     */
    public function setFailMsg($failMsg)
    {
        $this->container['failMsg'] = $failMsg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


