<?php
/**
 * MerBankCardBinRespDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 子商户入网大算航旅
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Sys\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * MerBankCardBinRespDto Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MerBankCardBinRespDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MerBankCardBinRespDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'returnMsg' => 'string',
        'returnCode' => 'string',
        'bankId' => 'string',
        'bankCode' => 'string',
        'bankName' => 'string',
        'cardName' => 'string',
        'cardLength' => 'int',
        'verifyLength' => 'int',
        'verifyCode' => 'string',
        'cardType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'returnMsg' => null,
        'returnCode' => null,
        'bankId' => null,
        'bankCode' => null,
        'bankName' => null,
        'cardName' => null,
        'cardLength' => 'int32',
        'verifyLength' => 'int32',
        'verifyCode' => null,
        'cardType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'returnMsg' => 'returnMsg',
        'returnCode' => 'returnCode',
        'bankId' => 'bankId',
        'bankCode' => 'bankCode',
        'bankName' => 'bankName',
        'cardName' => 'cardName',
        'cardLength' => 'cardLength',
        'verifyLength' => 'verifyLength',
        'verifyCode' => 'verifyCode',
        'cardType' => 'cardType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'returnMsg' => 'setReturnMsg',
        'returnCode' => 'setReturnCode',
        'bankId' => 'setBankId',
        'bankCode' => 'setBankCode',
        'bankName' => 'setBankName',
        'cardName' => 'setCardName',
        'cardLength' => 'setCardLength',
        'verifyLength' => 'setVerifyLength',
        'verifyCode' => 'setVerifyCode',
        'cardType' => 'setCardType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'returnMsg' => 'getReturnMsg',
        'returnCode' => 'getReturnCode',
        'bankId' => 'getBankId',
        'bankCode' => 'getBankCode',
        'bankName' => 'getBankName',
        'cardName' => 'getCardName',
        'cardLength' => 'getCardLength',
        'verifyLength' => 'getVerifyLength',
        'verifyCode' => 'getVerifyCode',
        'cardType' => 'getCardType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['returnMsg'] = isset($data['returnMsg']) ? $data['returnMsg'] : null;
        $this->container['returnCode'] = isset($data['returnCode']) ? $data['returnCode'] : null;
        $this->container['bankId'] = isset($data['bankId']) ? $data['bankId'] : null;
        $this->container['bankCode'] = isset($data['bankCode']) ? $data['bankCode'] : null;
        $this->container['bankName'] = isset($data['bankName']) ? $data['bankName'] : null;
        $this->container['cardName'] = isset($data['cardName']) ? $data['cardName'] : null;
        $this->container['cardLength'] = isset($data['cardLength']) ? $data['cardLength'] : null;
        $this->container['verifyLength'] = isset($data['verifyLength']) ? $data['verifyLength'] : null;
        $this->container['verifyCode'] = isset($data['verifyCode']) ? $data['verifyCode'] : null;
        $this->container['cardType'] = isset($data['cardType']) ? $data['cardType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets returnMsg
     *
     * @return string
     */
    public function getReturnMsg()
    {
        return $this->container['returnMsg'];
    }

    /**
     * Sets returnMsg
     *
     * @param string $returnMsg returnMsg
     *
     * @return $this
     */
    public function setReturnMsg($returnMsg)
    {
        $this->container['returnMsg'] = $returnMsg;

        return $this;
    }

    /**
     * Gets returnCode
     *
     * @return string
     */
    public function getReturnCode()
    {
        return $this->container['returnCode'];
    }

    /**
     * Sets returnCode
     *
     * @param string $returnCode returnCode
     *
     * @return $this
     */
    public function setReturnCode($returnCode)
    {
        $this->container['returnCode'] = $returnCode;

        return $this;
    }

    /**
     * Gets bankId
     *
     * @return string
     */
    public function getBankId()
    {
        return $this->container['bankId'];
    }

    /**
     * Sets bankId
     *
     * @param string $bankId bankId
     *
     * @return $this
     */
    public function setBankId($bankId)
    {
        $this->container['bankId'] = $bankId;

        return $this;
    }

    /**
     * Gets bankCode
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->container['bankCode'];
    }

    /**
     * Sets bankCode
     *
     * @param string $bankCode bankCode
     *
     * @return $this
     */
    public function setBankCode($bankCode)
    {
        $this->container['bankCode'] = $bankCode;

        return $this;
    }

    /**
     * Gets bankName
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bankName'];
    }

    /**
     * Sets bankName
     *
     * @param string $bankName bankName
     *
     * @return $this
     */
    public function setBankName($bankName)
    {
        $this->container['bankName'] = $bankName;

        return $this;
    }

    /**
     * Gets cardName
     *
     * @return string
     */
    public function getCardName()
    {
        return $this->container['cardName'];
    }

    /**
     * Sets cardName
     *
     * @param string $cardName cardName
     *
     * @return $this
     */
    public function setCardName($cardName)
    {
        $this->container['cardName'] = $cardName;

        return $this;
    }

    /**
     * Gets cardLength
     *
     * @return int
     */
    public function getCardLength()
    {
        return $this->container['cardLength'];
    }

    /**
     * Sets cardLength
     *
     * @param int $cardLength cardLength
     *
     * @return $this
     */
    public function setCardLength($cardLength)
    {
        $this->container['cardLength'] = $cardLength;

        return $this;
    }

    /**
     * Gets verifyLength
     *
     * @return int
     */
    public function getVerifyLength()
    {
        return $this->container['verifyLength'];
    }

    /**
     * Sets verifyLength
     *
     * @param int $verifyLength verifyLength
     *
     * @return $this
     */
    public function setVerifyLength($verifyLength)
    {
        $this->container['verifyLength'] = $verifyLength;

        return $this;
    }

    /**
     * Gets verifyCode
     *
     * @return string
     */
    public function getVerifyCode()
    {
        return $this->container['verifyCode'];
    }

    /**
     * Sets verifyCode
     *
     * @param string $verifyCode verifyCode
     *
     * @return $this
     */
    public function setVerifyCode($verifyCode)
    {
        $this->container['verifyCode'] = $verifyCode;

        return $this;
    }

    /**
     * Gets cardType
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['cardType'];
    }

    /**
     * Sets cardType
     *
     * @param string $cardType cardType
     *
     * @return $this
     */
    public function setCardType($cardType)
    {
        $this->container['cardType'] = $cardType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


