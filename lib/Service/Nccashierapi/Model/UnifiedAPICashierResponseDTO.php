<?php
/**
 * UnifiedAPICashierResponseDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API收银台
 *
 * API收银台包含的所有API接口
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Nccashierapi\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * UnifiedAPICashierResponseDTO Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnifiedAPICashierResponseDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UnifiedAPICashierResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'payTool' => 'string',
        'payType' => 'string',
        'merchantNo' => 'string',
        'resultType' => 'string',
        'resultData' => 'string',
        'extParamMap' => 'string',
        'cashFee' => 'float',
        'settlementFee' => 'float',
        'bankPromotionInfoDTOS' => '\Yeepay\Yop\Sdk\Service\Nccashierapi\Model\BankPromotionInfoDTO[]',
        'uniqueOrderNo' => 'string',
        'parentMerchantNo' => 'string',
        'orderId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'payTool' => null,
        'payType' => null,
        'merchantNo' => null,
        'resultType' => null,
        'resultData' => null,
        'extParamMap' => null,
        'cashFee' => null,
        'settlementFee' => null,
        'bankPromotionInfoDTOS' => null,
        'uniqueOrderNo' => null,
        'parentMerchantNo' => null,
        'orderId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'payTool' => 'payTool',
        'payType' => 'payType',
        'merchantNo' => 'merchantNo',
        'resultType' => 'resultType',
        'resultData' => 'resultData',
        'extParamMap' => 'extParamMap',
        'cashFee' => 'cashFee',
        'settlementFee' => 'settlementFee',
        'bankPromotionInfoDTOS' => 'bankPromotionInfoDTOS',
        'uniqueOrderNo' => 'uniqueOrderNo',
        'parentMerchantNo' => 'parentMerchantNo',
        'orderId' => 'orderId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'payTool' => 'setPayTool',
        'payType' => 'setPayType',
        'merchantNo' => 'setMerchantNo',
        'resultType' => 'setResultType',
        'resultData' => 'setResultData',
        'extParamMap' => 'setExtParamMap',
        'cashFee' => 'setCashFee',
        'settlementFee' => 'setSettlementFee',
        'bankPromotionInfoDTOS' => 'setBankPromotionInfoDTOS',
        'uniqueOrderNo' => 'setUniqueOrderNo',
        'parentMerchantNo' => 'setParentMerchantNo',
        'orderId' => 'setOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'payTool' => 'getPayTool',
        'payType' => 'getPayType',
        'merchantNo' => 'getMerchantNo',
        'resultType' => 'getResultType',
        'resultData' => 'getResultData',
        'extParamMap' => 'getExtParamMap',
        'cashFee' => 'getCashFee',
        'settlementFee' => 'getSettlementFee',
        'bankPromotionInfoDTOS' => 'getBankPromotionInfoDTOS',
        'uniqueOrderNo' => 'getUniqueOrderNo',
        'parentMerchantNo' => 'getParentMerchantNo',
        'orderId' => 'getOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['payTool'] = isset($data['payTool']) ? $data['payTool'] : null;
        $this->container['payType'] = isset($data['payType']) ? $data['payType'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['resultType'] = isset($data['resultType']) ? $data['resultType'] : null;
        $this->container['resultData'] = isset($data['resultData']) ? $data['resultData'] : null;
        $this->container['extParamMap'] = isset($data['extParamMap']) ? $data['extParamMap'] : null;
        $this->container['cashFee'] = isset($data['cashFee']) ? $data['cashFee'] : null;
        $this->container['settlementFee'] = isset($data['settlementFee']) ? $data['settlementFee'] : null;
        $this->container['bankPromotionInfoDTOS'] = isset($data['bankPromotionInfoDTOS']) ? $data['bankPromotionInfoDTOS'] : null;
        $this->container['uniqueOrderNo'] = isset($data['uniqueOrderNo']) ? $data['uniqueOrderNo'] : null;
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets payTool
     *
     * @return string
     */
    public function getPayTool()
    {
        return $this->container['payTool'];
    }

    /**
     * Sets payTool
     *
     * @param string $payTool payTool
     *
     * @return $this
     */
    public function setPayTool($payTool)
    {
        $this->container['payTool'] = $payTool;

        return $this;
    }

    /**
     * Gets payType
     *
     * @return string
     */
    public function getPayType()
    {
        return $this->container['payType'];
    }

    /**
     * Sets payType
     *
     * @param string $payType payType
     *
     * @return $this
     */
    public function setPayType($payType)
    {
        $this->container['payType'] = $payType;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo merchantNo
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets resultType
     *
     * @return string
     */
    public function getResultType()
    {
        return $this->container['resultType'];
    }

    /**
     * Sets resultType
     *
     * @param string $resultType resultType
     *
     * @return $this
     */
    public function setResultType($resultType)
    {
        $this->container['resultType'] = $resultType;

        return $this;
    }

    /**
     * Gets resultData
     *
     * @return string
     */
    public function getResultData()
    {
        return $this->container['resultData'];
    }

    /**
     * Sets resultData
     *
     * @param string $resultData resultData
     *
     * @return $this
     */
    public function setResultData($resultData)
    {
        $this->container['resultData'] = $resultData;

        return $this;
    }

    /**
     * Gets extParamMap
     *
     * @return string
     */
    public function getExtParamMap()
    {
        return $this->container['extParamMap'];
    }

    /**
     * Sets extParamMap
     *
     * @param string $extParamMap extParamMap
     *
     * @return $this
     */
    public function setExtParamMap($extParamMap)
    {
        $this->container['extParamMap'] = $extParamMap;

        return $this;
    }

    /**
     * Gets cashFee
     *
     * @return float
     */
    public function getCashFee()
    {
        return $this->container['cashFee'];
    }

    /**
     * Sets cashFee
     *
     * @param float $cashFee cashFee
     *
     * @return $this
     */
    public function setCashFee($cashFee)
    {
        $this->container['cashFee'] = $cashFee;

        return $this;
    }

    /**
     * Gets settlementFee
     *
     * @return float
     */
    public function getSettlementFee()
    {
        return $this->container['settlementFee'];
    }

    /**
     * Sets settlementFee
     *
     * @param float $settlementFee settlementFee
     *
     * @return $this
     */
    public function setSettlementFee($settlementFee)
    {
        $this->container['settlementFee'] = $settlementFee;

        return $this;
    }

    /**
     * Gets bankPromotionInfoDTOS
     *
     * @return \Yeepay\Yop\Sdk\Service\Nccashierapi\Model\BankPromotionInfoDTO[]
     */
    public function getBankPromotionInfoDTOS()
    {
        return $this->container['bankPromotionInfoDTOS'];
    }

    /**
     * Sets bankPromotionInfoDTOS
     *
     * @param \Yeepay\Yop\Sdk\Service\Nccashierapi\Model\BankPromotionInfoDTO[] $bankPromotionInfoDTOS bankPromotionInfoDTOS
     *
     * @return $this
     */
    public function setBankPromotionInfoDTOS($bankPromotionInfoDTOS)
    {
        $this->container['bankPromotionInfoDTOS'] = $bankPromotionInfoDTOS;

        return $this;
    }

    /**
     * Gets uniqueOrderNo
     *
     * @return string
     */
    public function getUniqueOrderNo()
    {
        return $this->container['uniqueOrderNo'];
    }

    /**
     * Sets uniqueOrderNo
     *
     * @param string $uniqueOrderNo uniqueOrderNo
     *
     * @return $this
     */
    public function setUniqueOrderNo($uniqueOrderNo)
    {
        $this->container['uniqueOrderNo'] = $uniqueOrderNo;

        return $this;
    }

    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo parentMerchantNo
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId orderId
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


