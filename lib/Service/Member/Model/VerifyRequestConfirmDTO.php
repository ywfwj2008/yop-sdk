<?php
/**
 * VerifyRequestConfirmDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 会员
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Member\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * VerifyRequestConfirmDTO Class Doc Comment
 *
 * @category Class
 * @description 方法签名第0个参数，请自行修改arg0等参数的名字
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VerifyRequestConfirmDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VerifyRequestConfirmDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'platformId' => 'string',
        'platformName' => 'string',
        'requestId' => 'string',
        'platformUserNo' => 'string',
        'saleProductCode' => 'string',
        'businessNo' => 'string',
        'validateCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'platformId' => null,
        'platformName' => null,
        'requestId' => null,
        'platformUserNo' => null,
        'saleProductCode' => null,
        'businessNo' => null,
        'validateCode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'platformId' => 'platformId',
        'platformName' => 'platformName',
        'requestId' => 'requestId',
        'platformUserNo' => 'platformUserNo',
        'saleProductCode' => 'saleProductCode',
        'businessNo' => 'businessNo',
        'validateCode' => 'validateCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'platformId' => 'setPlatformId',
        'platformName' => 'setPlatformName',
        'requestId' => 'setRequestId',
        'platformUserNo' => 'setPlatformUserNo',
        'saleProductCode' => 'setSaleProductCode',
        'businessNo' => 'setBusinessNo',
        'validateCode' => 'setValidateCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'platformId' => 'getPlatformId',
        'platformName' => 'getPlatformName',
        'requestId' => 'getRequestId',
        'platformUserNo' => 'getPlatformUserNo',
        'saleProductCode' => 'getSaleProductCode',
        'businessNo' => 'getBusinessNo',
        'validateCode' => 'getValidateCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['platformId'] = isset($data['platformId']) ? $data['platformId'] : null;
        $this->container['platformName'] = isset($data['platformName']) ? $data['platformName'] : null;
        $this->container['requestId'] = isset($data['requestId']) ? $data['requestId'] : null;
        $this->container['platformUserNo'] = isset($data['platformUserNo']) ? $data['platformUserNo'] : null;
        $this->container['saleProductCode'] = isset($data['saleProductCode']) ? $data['saleProductCode'] : null;
        $this->container['businessNo'] = isset($data['businessNo']) ? $data['businessNo'] : null;
        $this->container['validateCode'] = isset($data['validateCode']) ? $data['validateCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets platformId
     *
     * @return string
     */
    public function getPlatformId()
    {
        return $this->container['platformId'];
    }

    /**
     * Sets platformId
     *
     * @param string $platformId platformId
     *
     * @return $this
     */
    public function setPlatformId($platformId)
    {
        $this->container['platformId'] = $platformId;

        return $this;
    }

    /**
     * Gets platformName
     *
     * @return string
     */
    public function getPlatformName()
    {
        return $this->container['platformName'];
    }

    /**
     * Sets platformName
     *
     * @param string $platformName platformName
     *
     * @return $this
     */
    public function setPlatformName($platformName)
    {
        $this->container['platformName'] = $platformName;

        return $this;
    }

    /**
     * Gets requestId
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['requestId'];
    }

    /**
     * Sets requestId
     *
     * @param string $requestId requestId
     *
     * @return $this
     */
    public function setRequestId($requestId)
    {
        $this->container['requestId'] = $requestId;

        return $this;
    }

    /**
     * Gets platformUserNo
     *
     * @return string
     */
    public function getPlatformUserNo()
    {
        return $this->container['platformUserNo'];
    }

    /**
     * Sets platformUserNo
     *
     * @param string $platformUserNo platformUserNo
     *
     * @return $this
     */
    public function setPlatformUserNo($platformUserNo)
    {
        $this->container['platformUserNo'] = $platformUserNo;

        return $this;
    }

    /**
     * Gets saleProductCode
     *
     * @return string
     */
    public function getSaleProductCode()
    {
        return $this->container['saleProductCode'];
    }

    /**
     * Sets saleProductCode
     *
     * @param string $saleProductCode saleProductCode
     *
     * @return $this
     */
    public function setSaleProductCode($saleProductCode)
    {
        $this->container['saleProductCode'] = $saleProductCode;

        return $this;
    }

    /**
     * Gets businessNo
     *
     * @return string
     */
    public function getBusinessNo()
    {
        return $this->container['businessNo'];
    }

    /**
     * Sets businessNo
     *
     * @param string $businessNo businessNo
     *
     * @return $this
     */
    public function setBusinessNo($businessNo)
    {
        $this->container['businessNo'] = $businessNo;

        return $this;
    }

    /**
     * Gets validateCode
     *
     * @return string
     */
    public function getValidateCode()
    {
        return $this->container['validateCode'];
    }

    /**
     * Sets validateCode
     *
     * @param string $validateCode validateCode
     *
     * @return $this
     */
    public function setValidateCode($validateCode)
    {
        $this->container['validateCode'] = $validateCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


